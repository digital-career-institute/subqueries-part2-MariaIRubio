
-- Table 1: RepairTechnicians
-- This table will store information about the technicians who repair bicycles.

CREATE TABLE RepairTechnicians (
	TechnicianID INT PRIMARY KEY,
	FirstName VARCHAR(50),
	LastName VARCHAR(50),
	Email VARCHAR(100),
	Phone VARCHAR(15),
	Address VARCHAR(255),
	Specialization VARCHAR(100),
	Experience INT);
	
INSERT INTO RepairTechnicians (TechnicianID, FirstName, LastName, Email, Phone, Address, Specialization, Experience) VALUES
	(1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890', '123 Main St', 'Bicycle Repairs', 5),
	(2, 'Alice', 'Smith', 'alice.smith@example.com', '987-654-3210', '456 Oak St', 'Wheel Alignment', 8),
	(3, 'Bob', 'Johnson', 'bob.johnson@example.com', '555-123-4567', '789 Pine St', 'Brake Repairs', 3),
	(4, 'Eva', 'Williams', 'eva.williams@example.com', '333-777-8888', '321 Elm St', 'Gear Adjustments', 6),
	(5, 'Mike', 'Anderson', 'mike.anderson@example.com', '444-555-9999', '555 Cedar St', 'Frame Welding', 10);
	

INSERT INTO RepairTechnicians (TechnicianID, FirstName, LastName, Email, Phone, Address, Specialization, Experience) VALUES
	(6, 'Grace', 'Jones', 'grace.jones@example.com', '555-888-9999', '789 Elm St', 'Wheel Building', 7),
	(7, 'Peter', 'Clark', 'peter.clark@example.com', '333-111-2222', '456 Pine St', 'Suspension Repairs', 9);


SELECT * FROM RepairTechnicians;

-- Table 2: RepairJobs
-- This table will store information about the repair jobs performed by technicians.

CREATE TABLE RepairJobs (
	JobID INT PRIMARY KEY,
	TechnicianID INT, 
	BicycleOwner VARCHAR(100),
	BicycleModel VARCHAR(50),
	RepairDate DATE,
	RepairType VARCHAR(50),
	Cost DECIMAL(10,2),
	Notes TEXT, 
	FOREIGN KEY (TechnicianID) REFERENCES RepairTechnicians(TechnicianID));

INSERT INTO RepairJobs (JobID, TechnicianID, BicycleOwner, BicycleModel, RepairDate, RepairType, Cost, Notes) VALUES
	(101, 1, 'Mark Davis', 'Mountain Bike', '2024-02-01', 'Tire Replacement', 50.00, 'Replaced both tires.'),
	(102, 2, 'Emily White', 'Road Bike', '2024-02-05', 'Brake Adjustment', 30.00, 'Adjusted brake pads.'),
	(103, 3, 'Chris Johnson', 'Hybrid Bike', '2024-02-10', 'Chain Replacement', 40.00, 'Installed a new chain.'),
	(104, 4, 'Sophia Martin', 'Electric Bike', '2024-02-15', 'Battery Replacement', 120.00, 'Replaced the battery.'),
	(105, 5, 'Emma Wilson', 'Cruiser Bike', '2024-02-20', 'Wheel Truing', 25.00, 'Trued the wheels.'),
	(106, 1, 'Daniel Brown', 'BMX Bike', '2024-02-25', 'Handlebar Adjustment', 35.00, 'Adjusted the handlebar.'),
	(107, 2, 'Olivia Miller', 'City Bike', '2024-03-01', 'Gear Tune-up', 45.00, 'Tuned the gears.'),
	(108, 3, 'Liam Davis', 'Folding Bike', '2024-03-05', 'Frame Inspection', 55.00, 'Checked the frame for any issues.'),
	(109, 4, 'Ava Harris', 'Kids Bike', '2024-03-10', 'Pedal Replacement', 20.00, 'Replaced the pedals.'),
	(110, 5, 'Noah Wilson', 'Recumbent Bike', '2024-03-15', 'Seat Adjustment', 15.00, 'Adjusted the seat position.');


INSERT INTO RepairJobs (JobID, TechnicianID, BicycleOwner, BicycleModel, RepairDate, RepairType, Cost, Notes) VALUES
	(201, 1, 'John Smith', 'Mountain Bike', '2024-04-01', 'Tire Replacement', 40.00, 'Replaced both tires.'),
	(202, 2, 'Alice Brown', 'Road Bike', '2024-04-02', 'Brake Adjustment', 25.00, 'Adjusted brake pads.'),
	(203, 3, 'Bob Johnson', 'Hybrid Bike', '2024-04-03', 'Chain Replacement', 35.00, 'Installed a new chain.'),
	(204, 4, 'John Smith', 'Electric Bike', '2024-04-04', 'Battery Replacement', 120.00, 'Replaced the battery.'),
	(205, 5, 'Alice Brown', 'Cruiser Bike', '2024-04-05', 'Wheel Truing', 30.00, 'Trued the wheels.'),
	(206, 1, 'Bob Johnson', 'BMX Bike', '2024-04-06', 'Handlebar Adjustment', 35.00, 'Adjusted the handlebar.');
	
INSERT INTO RepairJobs (JobID, TechnicianID, BicycleOwner, BicycleModel, RepairDate, RepairType, Cost, Notes) VALUES
	(207, 4, 'Mark Davis', 'Mountain Bike', '2024-05-015', 'Brake Adjustment', 25.00, 'Adjusted brake pads.');
	
SELECT * FROM RepairJobs;
	
-- Task 1: Aggregate Functions and Subqueries
-- Task: Find the average number of years of experience for technicians who have performed repair jobs on bicycles costing more than $100. Include the technician's name and the average experience.
SELECT t.TechnicianID, FirstName, LastName, 
	COUNT(j.JobID) AS total_jobs, 
	SUM(j.cost) AS total_jobs_cost, 
	Experience, 
	ROUND(avg(Experience) OVER(), 1) AS average_experience_years 
FROM RepairTechnicians t
JOIN RepairJobs j ON t.TechnicianID = j.TechnicianID
GROUP BY t.TechnicianID, FirstName, LastName, Experience
HAVING SUM(j.cost) > 100;
-- Nootan
SELECT 
    FirstName,
    LastName,
    ROUND(AVG(Experience),2) AS Average_Experience
FROM 
    RepairTechnicians
WHERE 
    TechnicianID IN (SELECT TechnicianID FROM RepairJobs WHERE Cost > 100)
GROUP BY 
    TechnicianID;
	
-- Task 2: Combining Joins and Subqueries
-- Task: List the names of technicians who have not performed any repair jobs.
SELECT t.TechnicianID, FirstName, LastName 
FROM RepairTechnicians t
WHERE t.TechnicianID NOT IN (SELECT TechnicianID FROM RepairJobs);

-- Nootan
SELECT 
    FirstName,
    LastName
FROM 
    RepairTechnicians
WHERE 
    TechnicianID NOT IN (SELECT DISTINCT TechnicianID FROM RepairJobs);
	
-- Task 3: Using EXISTS and IN
-- Task: Find the technicians who have worked on repairs for bicycles owned by more than one person. Include the technician's name and the count of distinct bicycle owners.
SELECT t.TechnicianID, FirstName, LastName,
	COUNT(DISTINCT BicycleOwner) AS Owners_Count
FROM RepairTechnicians t
JOIN RepairJobs j ON t.TechnicianID = j.TechnicianID
GROUP BY t.TechnicianID
HAVING EXISTS(
	SELECT 1
	FROM RepairJobs j
	WHERE t.TechnicianID = j.TechnicianID
	HAVING COUNT(DISTINCT j.BicycleOwner) > 1
);

-- Nootan
SELECT 
    FirstName,
    LastName,
    COUNT(DISTINCT BicycleOwner) AS Owners_Count
FROM 
    RepairTechnicians
JOIN 
    RepairJobs ON RepairTechnicians.TechnicianID = RepairJobs.TechnicianID
GROUP BY 
    RepairTechnicians.TechnicianID
HAVING 
    EXISTS (SELECT 1 FROM RepairJobs R WHERE R.TechnicianID = RepairTechnicians.TechnicianID
            HAVING COUNT(DISTINCT R.BicycleOwner) > 1);

-- Task 4: Subqueries with GROUP BY and HAVING
-- Task: Identify technicians who have performed repairs on at least 5 bicycles and list the total number of repairs they have conducted. Include the technician's name and the total number of repairs.
SELECT t.TechnicianID, FirstName, LastName, 
	COUNT(j.JobID) AS total_jobs
FROM RepairTechnicians t
JOIN RepairJobs j ON t.TechnicianID = j.TechnicianID
GROUP BY t.TechnicianID, FirstName, LastName 
HAVING COUNT(j.JobID)>= 4;

-- Nootan

SELECT 
    FirstName,
    LastName,
    COUNT(*) AS TotalRepairs
FROM 
    RepairTechnicians
JOIN 
    RepairJobs ON RepairTechnicians.TechnicianID = RepairJobs.TechnicianID
GROUP BY 
    RepairTechnicians.TechnicianID
HAVING 
    COUNT(*) >= 2;

-- Task 5: Subqueries with AND, OR, and NOT
-- Task: List the technicians who have performed repairs on bicycles with a cost between $50 and $150 OR have more than 7 years of experience. Include the technician's name and the repair cost.
SELECT t.TechnicianID, FirstName, LastName, Experience, J.RepairType, j.Cost
FROM RepairTechnicians t
JOIN RepairJobs j ON t.TechnicianID = j.TechnicianID
WHERE (j.Cost BETWEEN 50 AND 150) OR (Experience > 7);

-- Nootan

SELECT 
    FirstName,
    LastName,
    Cost
FROM 
    RepairTechnicians
JOIN 
    RepairJobs ON RepairTechnicians.TechnicianID = RepairJobs.TechnicianID
WHERE 
    (Cost BETWEEN 50 AND 150) OR (Experience > 7);

-- Task 6: Combining EXISTS and Aggregate Functions
-- Task: Find technicians who have not performed any repairs on bicycles with a cost exceeding $200. Include the technician's name and the total number of such repairs.
	
SELECT t.TechnicianID, FirstName, LastName, COUNT(j.JobID) AS number_jobs, j.RepairType, j.Cost
FROM RepairTechnicians t
JOIN RepairJobs j ON t.TechnicianID = j.TechnicianID 
WHERE NOT EXISTS (
	SELECT 1
	FROM RepairJobs j
	WHERE t.TechnicianID = j.TechnicianID AND j.Cost > 200)
GROUP BY t.TechnicianID, FirstName, LastName, j.RepairType, j.Cost;

-- Nootan

SELECT 
    FirstName,
    LastName,
    COUNT(*) AS Number_of_Repairs
FROM 
    RepairTechnicians
WHERE 
    NOT EXISTS (SELECT 1 FROM RepairJobs WHERE RepairJobs.TechnicianID = RepairTechnicians.TechnicianID AND Cost > 200)
GROUP BY 
    RepairTechnicians.TechnicianID;
